Terraform 이란? -> 오픈 소스 "코드형 인프라"툴

선언적인 코딩 툴인 terraform은 상위 레벨 구성 언어를 사용하여 애플리케이션 실행을 위해 원하는 "최종 상태" 클라우드 또는 온프레미스 인프라를 기술하도록 합니다.
그런 다음 해당 최종. 상태에 도달하기 위한 계획을 생성하고 인프라를 프로비저닝하기 위한 계획을 실행합니다.

코드형 인프라(IaC)란? -> 개발자는 자동화되고 신속하며 반복 가능한 프로비져닝을 제공하는 방식으로 인프라를 코딩할 수 있다.
-> 또한 버전 관리, 지속적 통합, 지속적 배포 등 Agile 및 DevOps 실무의 주요 구성요소
장점
1. 속도향상 -> 자원 배포 및 연결 할 때 인터페이스 수동 탐색보다 자동화가 더 빠름
2. 안정성 향상 -> 인프라의 규모가 클 경우, 잘못된 구성, 서비스 프로비저닝 -> IaC는 자원은 항상 프로비저닝되고 선언된 대로 구성
3. 구성 드리프트 방지 -> 구성 드리프트(configuration drift)는 환경을 프로비저닝한 구성이 더 이상 실제 환경과 일치하지 않는 경우 발생
4. 실험, 테스트 및 최적화 지원 -> 코드형 인프라를 사용하면 새 인프라를 더 쉽고 빠르게 프로비저닝할 수 있기 때문에 많은 시간과 자원을 투자하지 않고 실험적 변경 사항을 적용하고 테스트할 수 있다.


Terraform을 사용하는 이유
1. 오픈 소스 : Terraform은 플랫폼에 대한 플로그인을 구축하는 기여자로 구성된 대규모 커뮤니티의 지원을 받음, 새로운 이점과 개선된 기능이 지속적 향상
2. 플랫폼에 구애받지 않음 -> 어느 클라우드 서비스 제공자와든 함께 사용할 수 있다는 뜻
3. 변경 불가능 인프라 -> 대부분 코드형 인프라 툴은 변경 가능 인프라를 생성 = 변경 사항이 쌓이면서 다른 서버 또는 실제 프로비저닝이 원래 구성에서 더 멀리 표류하여
버그 또는 성능 문제를 진단하고 정정하기 어렵기 때문에 변경 가능한 인프라는 구성 표류의 위험을 내포
-> 변경 불가능 인프라 프로비저닝은 변경 사항이 적용 될 때마다 현재 구성이 변경을 반영할 수 있는 새로운 구성으로 대체되고 인프라가 다시 프로비저닝 됨
-> 이전 구성은 필요하거나 원할 경우 보관, 백업 가능


